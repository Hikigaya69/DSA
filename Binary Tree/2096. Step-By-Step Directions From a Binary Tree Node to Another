//You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t.
//Find the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. Each letter indicates a specific direction:
//'L' means to go from a node to its left child node.
//'R' means to go from a node to its right child node.
//'U' means to go from a node to its parent node.
//Return the step-by-step directions of the shortest path from node s to node t.
// Medium

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* lowestCommonAncestor(TreeNode* root, int src, int dest) {
        if(!root)
            return NULL;
        
        if(root->val == src || root->val == dest)
            return root;
        
        TreeNode* l = lowestCommonAncestor(root->left,  src, dest);
        TreeNode* r = lowestCommonAncestor(root->right, src, dest);
        
        if(l && r)
            return root;
        
        return l ? l : r;
    }


    
   bool findPath(TreeNode* LCA,int target,string& path){
        if(LCA==NULL){
            return false;
        }
        
        if(LCA->val==target){
            return true;
        }
  ///left jaa
        path.push_back('L');

        if(findPath(LCA->left,target,path)==true){
            return true;
        }
        path.pop_back();
    //right jaaa

    path.push_back('R');

    if(findPath(LCA->right,target,path)==true){
        return true;
    }

    path.pop_back();

    return false;

    }
    string getDirections(TreeNode* root, int startValue, int destValue) {

        TreeNode *LCA =lowestCommonAncestor( root,startValue, destValue);

        string LCAtoSRC="";
        string LCAtoDEST="";

        findPath(LCA,startValue,LCAtoSRC);
        findPath(LCA,destValue,LCAtoDEST);

        string res="";
      
       for(int i=0;i<LCAtoSRC.length();i++){
        res.push_back('U');
       }

       res+=LCAtoDEST;

       return res;
        
    }
};
