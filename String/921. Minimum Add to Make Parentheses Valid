//Medium
//20-10-2024
//stack in simulation in string
//Nothing just insert if it is an open bracket and increment size
//if its a closed bracket and size>1 do size-- saying that one pair is closed
//if the pair is lonenly the increment open ++
//add size with open for edge cases

/*A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.*/


class Solution {
public:
    int minAddToMakeValid(string s) {

        int size = 0;
        int open = 0;

        for (char& ch : s) {
            if (ch == '(') {
                size++;
            } else if (size > 0) {
                size--;
            } else {
                open++;
            }
        }
        return open + size;
    }
};
