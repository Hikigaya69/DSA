//Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
//Medium
//20-10-2024
//Moores voting algo with slight change 
//maintain two counters and two pointers as well as check for el2!=nums[i] and el1!=nums[i] for count1==0 and count2==0 condition
//Verify that el1 and el2 are greatest and push it on to a vector


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> res;
        int minn = n / 3;

        int count1 = 0;
        int count2 = 0;
        int el1;
        int el2;

        for (int i = 0; i < n; i++) {
            if (count1 == 0 && nums[i] != el2) {
                count1++;
                el1 = nums[i];
            } else if (count2 == 0 && nums[i] != el1) {
                count2++;
                el2 = nums[i];
            } else if (el1 == nums[i]) {
                count1++;
            } else if (el2 == nums[i]) {
                count2++;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == el1) {
                count1++;
            } else if (nums[i] == el2) {
                count2++;
            }
        }

        if (count1 > minn) {
            res.push_back(el1);
        }
        if (count2 > minn) {
            res.push_back(el2);
        }

        sort(res.begin(), res.end());

        return res;
    }
};
