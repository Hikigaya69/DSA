// Easy
//You are given the heads of two sorted linked lists list1 and list2.

//Merge the two lists into one sorted list.
//The list should be made by splicing together the nodes of the first two lists.

//Return the head of the merged linked list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* head= new ListNode(0);
        ListNode* temp=head;

        if(list1==NULL){
            return list2;
        }if(list2==NULL){
            return list1;
        }


        while(list1&& list2){
            if(list1->val>=list2->val){
                temp->next=list2;
                list2=list2->next;
                temp=temp->next;
                temp->next=NULL;
            }
            else{
                temp->next=list1;
                list1=list1->next;
                temp=temp->next;
                temp->next=NULL;
            }

        if(list1){
            temp->next=list1;


         }  
         else{
            temp->next=list2;
         }  
         
        }
      return head->next;  
    }
};
