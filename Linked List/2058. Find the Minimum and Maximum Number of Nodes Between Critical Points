//Medium
//A critical point in a linked list is defined as either a local maxima or a local minima.
//A node is a local maxima if the current node has a value strictly greater than the previous node and the next node.
//A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.
//Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.
//Given a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. 
//If there are fewer than two critical points, return [-1, -1].
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {

        ListNode * prev=head;
        ListNode* curr=head->next;

        int i=1;
        int prevoiusCriticalPoint=0;
        int firstCriticalPoint=0;
        int minDist=INT_MAX;

        while(curr->next!=NULL)
        {
            if((curr->val < prev->val && curr->val < curr->next->val) || 
               (curr->val > prev->val && curr->val > curr->next->val))
               {
                   if(prevoiusCriticalPoint==0)
                   {
                    prevoiusCriticalPoint=i;
                    firstCriticalPoint=i;
                   }
                   else
                   
                   {
                      minDist=min(minDist,i-prevoiusCriticalPoint);
                      prevoiusCriticalPoint=i;

                   }
                 
                  


               }
                   i++;
                   prev=curr;
                   curr=curr->next;

        }
        if(minDist==INT_MAX){
            return {-1,-1};
        }else{
            return {minDist,prevoiusCriticalPoint-firstCriticalPoint};
        }
    }
};
